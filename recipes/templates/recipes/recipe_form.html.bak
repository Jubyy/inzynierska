{% extends 'base.html' %}
{% load static %}
{% load form_tags %}

{% block title %}{% if form.instance.pk %}Edytuj przepis{% else %}Dodaj przepis{% endif %}{% endblock %}

{% block extra_css %}
<style>
    .error-box {
        position: fixed;
        bottom: 0;
        right: 0;
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 10px;
        margin: 10px;
        max-width: 400px;
        max-height: 200px;
        overflow-y: auto;
        z-index: 9999;
        font-family: monospace;
        font-size: 12px;
    }

    .formset-container {
        margin-bottom: 2rem;
    }

    .ingredient-form {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid #dee2e6;
        position: relative;
    }

    .delete-row {
        position: absolute;
        top: 10px;
        right: 10px;
    }

    .add-row {
        margin-top: 1rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .errorlist {
        color: #dc3545;
        padding-left: 0;
        list-style: none;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .ingredient-form.marked-for-delete {
        opacity: 0.5;
        background-color: #ffeeee;
    }

    .ingredient-form.marked-for-delete:before {
        content: "Zostanie usunięty";
        position: absolute;
        top: 10px;
        right: 80px;
        color: #dc3545;
        font-weight: bold;
    }
    
    .select2-container {
        width: 100% !important;
    }
    .select2-container--default .select2-results__group {
        background-color: #f8f9fa;
        font-weight: bold;
        padding: 6px 12px;
        border-bottom: 1px solid #dee2e6;
        clear: both;
        display: block;
    }
    .select2-results__option {
        padding-left: 20px !important;
    }
    .select2-results__options .select2-results__option {
        white-space: normal;
        word-break: break-word;
    }
    .category-heading {
        font-weight: bold;
        padding: 8px 15px;
        margin-top: 10px;
        background-color: #f8f9fa;
        border-radius: 4px;
        border-left: 4px solid #2b5797;
        display: block;
        width: 100%;
    }
    .select2-container--default .select2-results > .select2-results__options {
        max-height: 400px;
    }
    .select2-results__option--highlighted .category-heading {
        background-color: #f0f0f0;
    }
    
    /* Style dla pola kategorii */
    .categories-select {
        width: 100% !important;
    }
    
    .select2-container--bootstrap4 .select2-selection--multiple {
        min-height: 38px;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        background-color: #fff;
        padding: 0.375rem 0.75rem;
    }
    
    .select2-container--bootstrap4 .select2-selection--multiple .select2-selection__choice {
        background: linear-gradient(45deg, #2ecc71, #27ae60);
        border: none;
        color: #fff;
        padding: 0.25rem 0.75rem;
        margin: 0.2rem;
        border-radius: 20px;
        font-size: 0.9rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
    }
    
    .select2-container--bootstrap4 .select2-selection--multiple .select2-selection__choice__remove {
        color: #fff;
        margin-right: 8px;
        font-size: 1.1rem;
        border: none;
        background: none;
        padding: 0 4px;
        order: -1;
    }
    
    .select2-container--bootstrap4 .select2-selection--multiple .select2-selection__choice__remove:hover {
        color: #fff;
        background-color: rgba(255,255,255,0.2);
        border-radius: 50%;
    }
    
    .select2-container--bootstrap4 .select2-dropdown {
        border-color: #dee2e6;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .select2-container--bootstrap4 .select2-results__option {
        padding: 0.5rem 1rem;
        transition: all 0.2s ease;
    }
    
    .select2-container--bootstrap4 .select2-results__option--highlighted {
        background: linear-gradient(45deg, #2ecc71, #27ae60);
        color: #fff;
    }
    
    .select2-container--bootstrap4 .select2-search__field {
        border: 1px solid #dee2e6 !important;
        border-radius: 0.375rem;
        padding: 0.375rem 0.75rem;
        margin-top: 0.2rem;
    }
    
    .select2-container--bootstrap4 .select2-search__field:focus {
        border-color: #86b7fe !important;
        box-shadow: 0 0 0 0.25rem rgba(13,110,253,.25);
    }

    /* Style dla edytora tekstu */
    .custom-editor {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        overflow: hidden;
    }
    
    .editor-toolbar {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        padding: 0.5rem;
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }
    
    .editor-toolbar button {
        background: #fff;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        color: #495057;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .editor-toolbar button:hover {
        background-color: #e9ecef;
        border-color: #ced4da;
    }
    
    .editor-toolbar button.active {
        background-color: #e9ecef;
        border-color: #ced4da;
        box-shadow: inset 0 3px 5px rgba(0,0,0,.125);
    }
    
    .editor-content {
        padding: 1rem;
        min-height: 200px;
        background-color: #fff;
    }
    
    .editor-content[contenteditable="true"] {
        outline: none;
    }
    
    .editor-content[contenteditable="true"]:focus {
        box-shadow: 0 0 0 0.25rem rgba(13,110,253,.25);
    }
    
    .editor-content ul, .editor-content ol {
        padding-left: 2rem;
    }
    
    .editor-content p {
        margin-bottom: 1rem;
    }

    /* Dodatkowe style dla przycisków edytora */
    .editor-toolbar {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        padding: 0.5rem;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }
    
    .editor-toolbar .btn-group {
        display: flex;
        gap: 0.25rem;
        margin-right: 0.5rem;
    }
    
    .editor-toolbar .btn-group:not(:last-child) {
        border-right: 1px solid #dee2e6;
        padding-right: 0.5rem;
    }
    
    .editor-toolbar button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 2rem;
        height: 2rem;
        padding: 0;
        font-size: 1rem;
        border-radius: 0.25rem;
        border: 1px solid #dee2e6;
        background: #fff;
        color: #495057;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .editor-toolbar button:hover {
        background: #e9ecef;
        border-color: #ced4da;
    }
    
    .editor-toolbar button.active {
        background: #e9ecef;
        border-color: #ced4da;
        box-shadow: inset 0 3px 5px rgba(0,0,0,.125);
        color: #0d6efd;
    }

    .ingredient-toolbar {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }
    
    .image-preview {
        max-width: 300px;
        margin-top: 10px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .unit-info {
        font-size: 0.9em;
        color: #6c757d;
        margin-top: 5px;
    }
    
    .unit-conversion {
        font-weight: bold;
        color: #28a745;
    }
    
    .common-units-table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }
    
    .common-units-table th,
    .common-units-table td {
        padding: 8px;
        border: 1px solid #dee2e6;
        text-align: left;
    }
    
    .common-units-table th {
        background-color: #f8f9fa;
    }
    
    .common-units-table tr:nth-child(even) {
        background-color: #f8f9fa;
    }
    
    .editor-toolbar {
        display: flex;
        gap: 5px;
        padding: 5px;
        background: #f8f9fa;
        border: 1px solid #ddd;
        border-bottom: none;
        border-radius: 4px 4px 0 0;
    }
    
    .editor-toolbar button {
        padding: 5px 10px;
        border: 1px solid #ddd;
        background: white;
        border-radius: 3px;
        cursor: pointer;
    }
    
    .editor-toolbar button:hover {
        background: #e9ecef;
    }
    
    .editor-toolbar button.active {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    .editor-content {
        min-height: 200px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 0 0 4px 4px;
        background: white;
    }
    
    .editor-content:focus {
        outline: none;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
    }
</style>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
{% endblock %}

{% block content %}
    <!-- Błędy JavaScript będą wyświetlane tutaj -->
    <div id="js-errors" class="error-box d-none">
        <h5>Błędy JavaScript:</h5>
        <ul id="error-list"></ul>
    </div>

    <div class="container mt-4">
    <h1>{% if form.instance.pk %}Edytuj przepis{% else %}Dodaj przepis{% endif %}</h1>

    {% if form.errors %}
            <div class="alert alert-danger">
        <ul>
            {% for field in form %}
                {% for error in field.errors %}
                    <li>{{ field.label }}: {{ error }}</li>
                {% endfor %}
            {% endfor %}
            {% for error in form.non_field_errors %}
                <li>{{ error }}</li>
            {% endfor %}
        </ul>
            </div>
    {% endif %}

        <form method="post" enctype="multipart/form-data" id="recipe-form">
        {% csrf_token %}
        
            <div class="card mb-4">
                <div class="card-header">
            <h2>Podstawowe informacje</h2>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="{{ form.title.id_for_label }}" class="form-label">{{ form.title.label }}</label>
                        {{ form.title|add_class:"form-control" }}
                        {% if form.title.help_text %}
                            <small class="form-text text-muted">{{ form.title.help_text }}</small>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        <label for="{{ form.categories.id_for_label }}" class="form-label">{{ form.categories.label }}</label>
                        {{ form.categories|add_class:"form-control categories-select" }}
                        {% if form.categories.help_text %}
                            <small class="form-text text-muted">{{ form.categories.help_text }}</small>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        <label for="description-editor" class="form-label">{{ form.description.label }}</label>
                        <div class="custom-editor">
                            <div class="editor-toolbar">
                                <div class="btn-group">
                                    <button type="button" data-command="bold" title="Pogrubienie"><i class="fas fa-bold"></i></button>
                                    <button type="button" data-command="italic" title="Kursywa"><i class="fas fa-italic"></i></button>
                                    <button type="button" data-command="underline" title="Podkreślenie"><i class="fas fa-underline"></i></button>
                                </div>
                                <div class="btn-group">
                                    <button type="button" data-command="justifyLeft" title="Wyrównaj do lewej"><i class="fas fa-align-left"></i></button>
                                    <button type="button" data-command="justifyCenter" title="Wyśrodkuj"><i class="fas fa-align-center"></i></button>
                                    <button type="button" data-command="justifyRight" title="Wyrównaj do prawej"><i class="fas fa-align-right"></i></button>
                                </div>
                                <div class="btn-group">
                                    <button type="button" data-command="insertUnorderedList" title="Lista punktowana"><i class="fas fa-list-ul"></i></button>
                                    <button type="button" data-command="insertOrderedList" title="Lista numerowana"><i class="fas fa-list-ol"></i></button>
                                </div>
                                <div class="btn-group">
                                    <button type="button" data-command="removeFormat" title="Usuń formatowanie"><i class="fas fa-remove-format"></i></button>
                                </div>
                            </div>
                            <div id="description-editor" class="editor-content" contenteditable="true"></div>
                            {{ form.description|add_class:"form-control d-none" }}
                        </div>
                        {% if form.description.help_text %}
                            <small class="form-text text-muted">{{ form.description.help_text }}</small>
                        {% endif %}
                    </div>
                    
                    <div class="mb-3">
                        <label for="instructions-editor" class="form-label">{{ form.instructions.label }}</label>
                        <div class="custom-editor">
                            <div class="editor-toolbar">
                                <div class="btn-group">
                                    <button type="button" data-command="bold" title="Pogrubienie"><i class="fas fa-bold"></i></button>
                                    <button type="button" data-command="italic" title="Kursywa"><i class="fas fa-italic"></i></button>
                                    <button type="button" data-command="underline" title="Podkreślenie"><i class="fas fa-underline"></i></button>
                                </div>
                                <div class="btn-group">
                                    <button type="button" data-command="justifyLeft" title="Wyrównaj do lewej"><i class="fas fa-align-left"></i></button>
                                    <button type="button" data-command="justifyCenter" title="Wyśrodkuj"><i class="fas fa-align-center"></i></button>
                                    <button type="button" data-command="justifyRight" title="Wyrównaj do prawej"><i class="fas fa-align-right"></i></button>
                                </div>
                                <div class="btn-group">
                                    <button type="button" data-command="insertUnorderedList" title="Lista punktowana"><i class="fas fa-list-ul"></i></button>
                                    <button type="button" data-command="insertOrderedList" title="Lista numerowana"><i class="fas fa-list-ol"></i></button>
                                </div>
                                <div class="btn-group">
                                    <button type="button" data-command="removeFormat" title="Usuń formatowanie"><i class="fas fa-remove-format"></i></button>
                                </div>
                            </div>
                            <div id="instructions-editor" class="editor-content" contenteditable="true"></div>
                            {{ form.instructions|add_class:"form-control d-none" }}
                        </div>
                        {% if form.instructions.help_text %}
                            <small class="form-text text-muted">{{ form.instructions.help_text }}</small>
                        {% endif %}
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="{{ form.servings.id_for_label }}" class="form-label">{{ form.servings.label }}</label>
                                {{ form.servings|add_class:"form-control" }}
                                {% if form.servings.help_text %}
                                    <small class="form-text text-muted">{{ form.servings.help_text }}</small>
                                {% endif %}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="{{ form.preparation_time.id_for_label }}" class="form-label">{{ form.preparation_time.label }}</label>
                                {{ form.preparation_time|add_class:"form-control" }}
                                {% if form.preparation_time.help_text %}
                                    <small class="form-text text-muted">{{ form.preparation_time.help_text }}</small>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="{{ form.image.id_for_label }}" class="form-label">{{ form.image.label }}</label>
                        {{ form.image|add_class:"form-control" }}
                        {% if form.image.help_text %}
                            <small class="form-text text-muted">{{ form.image.help_text }}</small>
                        {% endif %}
                        {% if form.instance.image %}
                            <div class="mt-2">
                                <img src="{{ form.instance.image.url }}" alt="Aktualne zdjęcie" class="img-thumbnail" style="max-width: 200px;">
                            </div>
                        {% endif %}
                    </div>
                </div>
        </div>
        
            <div class="card mb-4">
                <div class="card-header">
            <h2>Składniki</h2>
                </div>
                <div class="card-body">
                    <!-- Przycisk dodawania składnika -->
                    <div class="mb-4">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#ingredientModal">
                            Dodaj składnik
                        </button>
                    </div>

                    <!-- Lista dodanych składników -->
                    <h4>Dodaj składnik do przepisu</h4>
                    <div class="table-responsive">
                        <table class="table" id="ingredients-table">
                            <thead>
                                <tr>
                                    <th>Składnik</th>
                                    <th>Ilość</th>
                                    <th>Akcje</th>
                                </tr>
                            </thead>
                            <tbody id="ingredients-list">
                                <!-- Tutaj będą dynamicznie dodawane składniki -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Ukryty formset z faktycznymi danymi -->
            {{ ingredient_formset.management_form }}
                    <div id="ingredient-formset" class="d-none">
                        <!-- Tutaj będą umieszczane ukryte pola formularza składników -->
                    </div>
                    
                    <!-- Szablon pustego formularza -->
                    <div id="empty-form-template" class="d-none">
                        <div class="ingredient-form-row">
                            <input type="hidden" name="ingredients-__prefix__-id" id="id_ingredients-__prefix__-id">
                            <input type="hidden" name="ingredients-__prefix__-recipe" id="id_ingredients-__prefix__-recipe">
                            <input type="hidden" name="ingredients-__prefix__-ingredient" id="id_ingredients-__prefix__-ingredient">
                            <input type="hidden" name="ingredients-__prefix__-amount" id="id_ingredients-__prefix__-amount">
                            <input type="hidden" name="ingredients-__prefix__-unit" id="id_ingredients-__prefix__-unit">
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="d-flex justify-content-between">
                <a href="{% url 'recipes:list' %}" class="btn btn-outline-secondary">Anuluj</a>
                <button type="submit" class="btn btn-primary">Zapisz przepis</button>
            </div>
        </form>
    </div>

    <!-- Modal dla dodawania składnika do przepisu -->
    <div class="modal fade" id="ingredientModal" tabindex="-1" aria-labelledby="ingredientModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="ingredientModalLabel">Dodaj składnik</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="ingredient-select" class="form-label">Składnik</label>
                        <select id="ingredient-select" class="form-control">
                            <option value="">-- Wybierz składnik --</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="ingredient-amount" class="form-label">Ilość</label>
                        <input type="number" id="ingredient-amount" class="form-control" step="0.01" min="0.01">
                    </div>
                    <div class="mb-3">
                        <label for="ingredient-unit" class="form-label">Jednostka</label>
                        <select id="ingredient-unit" class="form-control">
                            <option value="">-- Wybierz jednostkę --</option>
                        </select>
                        <div id="unit-info" class="unit-info mt-2">
                            <div id="unit-description" class="unit-description"></div>
                            <div id="unit-conversion" class="unit-conversion fw-bold text-success"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                    <button type="button" class="btn btn-primary" id="add-ingredient-to-recipe">Dodaj</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<!-- Inicjalizacja danych z serwera dla JavaScript -->
<script>
    // Dane istniejących składników jako JSON
    var existingIngredientsJson = '{{ ingredient_formset_data|safe }}';
    var existingIngredients = [];
    
    try {
        if (existingIngredientsJson && existingIngredientsJson.trim() !== '') {
            existingIngredients = JSON.parse(existingIngredientsJson);
        }
    } catch (error) {
        console.error("Błąd parsowania danych składników:", error);
        existingIngredients = [];
    }
    
    // ID przepisu
    var recipeId = {% if form.instance.pk %}{{ form.instance.pk }}{% else %}null{% endif %};
</script>

<script>
    $(document).ready(function() {
        // Inicjalizacja Select2 dla pola kategorii
        var categoriesSelector = '{{ form.categories.id_for_label }}';
        if (categoriesSelector && categoriesSelector !== '') {
            $('#' + categoriesSelector).select2({
                theme: 'bootstrap-5',
                placeholder: 'Wybierz kategorie przepisu',
                allowClear: true,
                width: '100%',
                language: {
                    noResults: function() {
                        return "Brak wyników";
                    },
                    searching: function() {
                        return "Wyszukiwanie...";
                    }
                }
            });
        }

        // Podgląd zdjęcia
        var imageSelector = '{{ form.image.id_for_label }}';
        if (imageSelector && imageSelector !== '') {
            $('#' + imageSelector).change(function() {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        $('#image-preview').attr('src', e.target.result).removeClass('d-none');
                    }
                    reader.readAsDataURL(file);
                } else {
                    $('#image-preview').addClass('d-none');
                }
            });
        }

        // Inicjalizacja Select2 dla składników
        $('#ingredient-select').select2({
            theme: 'bootstrap-5',
            dropdownParent: $('#ingredientModal'),
            placeholder: 'Wybierz składnik',
            ajax: {
                url: "{% url 'recipes:ajax_ingredient_search' %}",
                dataType: 'json',
                delay: 250,
                processResults: function(data) {
                    return {
                        results: data.results
                    };
                }
            }
        });

        // Obsługa zmiany składnika - ładowanie dostępnych jednostek
        $('#ingredient-select').on('change', function() {
            const ingredientId = $(this).val();
            if (ingredientId) {
                $.ajax({
                    url: "{% url 'recipes:ajax_load_units' %}",
                    data: { ingredient_id: ingredientId },
                    success: function(data) {
                        const unitSelect = $('#ingredient-unit');
                        unitSelect.empty().append('<option value="">-- Wybierz jednostkę --</option>');
                        
                        // Sortowanie jednostek: najpierw najczęściej używane
                        const sortedUnits = [...data.units].sort((a, b) => {
                            // Najpierw domyślna jednostka
                            if (a.id === data.default_unit) return -1;
                            if (b.id === data.default_unit) return 1;
                            
                            // Potem popularne jednostki
                            if (a.is_common && !b.is_common) return -1;
                            if (!a.is_common && b.is_common) return 1;
                            
                            // Na końcu sortuj według typu i nazwy
                            if (a.type !== b.type) {
                                const typeOrder = { 'weight': 1, 'volume': 2, 'piece': 3, 'spoon': 4, 'custom': 5 };
                                return typeOrder[a.type] - typeOrder[b.type];
                            }
                            
                            return a.name.localeCompare(b.name);
                        });
                        
                        // Grupowanie jednostek według typu
                        const typeLabels = {
                            'weight': 'Waga',
                            'volume': 'Objętość',
                            'piece': 'Sztuki',
                            'spoon': 'Łyżki',
                            'custom': 'Inne'
                        };
                        
                        // Jeśli to składnik mięsny, ograniczamy do jednostek wagi
                        if (data.is_meat) {
                            // Dla mięsa tylko jednostki wagi
                            const weightUnits = sortedUnits.filter(unit => unit.type === 'weight');
                            const optgroup = $('<optgroup label="Waga">');
                            
                            weightUnits.forEach(function(unit) {
                                const option = new Option(
                                    `${unit.name} (${unit.symbol})${unit.id === data.default_unit ? ' - zalecana' : ''}`,
                                    unit.id,
                                    false,
                                    unit.id === data.default_unit
                                );
                                $(option).attr('data-symbol', unit.symbol);
                                $(option).attr('data-type', unit.type);
                                $(option).attr('data-conversion', unit.conversion || '');
                                optgroup.append(option);
                            });
                            
                            unitSelect.append(optgroup);
                        } else {
                            // Dla innych składników grupuj według typu
                            const unitsByType = {};
                            
                            sortedUnits.forEach(unit => {
                                if (!unitsByType[unit.type]) {
                                    unitsByType[unit.type] = [];
                                }
                                unitsByType[unit.type].push(unit);
                            });
                            
                            // Dodaj jednostki pogrupowane
                            Object.keys(unitsByType).forEach(type => {
                                const optgroup = $('<optgroup label="' + typeLabels[type] + '">');
                                
                                unitsByType[type].forEach(unit => {
                                    const option = new Option(
                                        `${unit.name} (${unit.symbol})${unit.id === data.default_unit ? ' - zalecana' : ''}`,
                                        unit.id,
                                        false,
                                        unit.id === data.default_unit
                                    );
                                    $(option).attr('data-symbol', unit.symbol);
                                    $(option).attr('data-type', unit.type);
                                    $(option).attr('data-conversion', unit.conversion || '');
                                    optgroup.append(option);
                                });
                                
                                unitSelect.append(optgroup);
                            });
                        }
                        
                        unitSelect.trigger('change');
                        
                        // Pokaż informację o domyślnych jednostkach dla składnika bazując na unit_type
                        if (data.unit_type) {
                            let descriptions = {
                                'weight_only': 'Ten składnik wymaga jednostek wagi (g, kg).',
                                'volume_only': 'Ten składnik wymaga jednostek objętości (ml, l).',
                                'piece_only': 'Ten składnik wymaga jednostek sztukowych.',
                                'weight_volume': 'Ten składnik można podać w jednostkach wagi lub objętości (g, ml, l).',
                                'weight_piece': 'Ten składnik można podać w jednostkach wagi lub sztukach.',
                                'weight_spoon': 'Ten składnik można podać w jednostkach wagi lub łyżkach/łyżeczkach.',
                                'volume_spoon': 'Ten składnik można podać w jednostkach objętości lub łyżkach/łyżeczkach.',
                                'all': 'Ten składnik można podać w dowolnych jednostkach.'
                            };
                            
                            $('#unit-description').html(descriptions[data.unit_type] || '');
                            
                            // Dla składników sztukowych dodaj informację, że można podać tylko sztuki
                            if (data.unit_type === 'piece_only') {
                                $('#unit-description').addClass('text-warning').html('Ten składnik podaje się w sztukach.');
                            }
                        }
                    }
                });
            } else {
                // Jeśli nie wybrano składnika, wyczyść listę jednostek
                $('#ingredient-unit').empty().append('<option value="">-- Wybierz jednostkę --</option>');
                $('#unit-description').html('');
                $('#unit-conversion').html('');
            }
        });

        // Obsługa zmiany jednostki - wyświetlanie opisu i przelicznika
        $('#ingredient-unit').on('change', function() {
            const unitId = $(this).val();
            const amount = $('#ingredient-amount').val() || 1;
            const selectedOption = $(this).find('option:selected');
            const unitSymbol = selectedOption.data('symbol');
            const unitType = selectedOption.data('type');
            const unitConversion = selectedOption.data('conversion');
            
            // Wyczyść poprzednie informacje
            $('#unit-conversion').html('');
            
            if (unitId) {
                // Pokaż podstawowy przelicznik z atrybutu data-conversion
                if (unitConversion) {
                    $('#unit-conversion').html(unitConversion);
                }
                
                // Sprawdź, czy wybrana jednostka wymaga liczb całkowitych
                const wholeNumberUnits = ['szt', 'sztuka', 'garść', 'opakowanie'];
                const requiresWholeNumber = wholeNumberUnits.includes(unitSymbol);
                
                // Zaktualizuj pole amount z odpowiednimi atrybutami
                const amountInput = $('#ingredient-amount');
                if (requiresWholeNumber) {
                    amountInput.attr('step', '1');
                    amountInput.attr('pattern', '[0-9]*');
                    
                    // Jeśli wartość nie jest liczbą całkowitą, zaokrąglij
                    if (amountInput.val() && !Number.isInteger(parseFloat(amountInput.val()))) {
                        amountInput.val(Math.round(parseFloat(amountInput.val())));
                    }
                    
                    // Dodaj podpowiedź
                    $('<small class="form-text text-warning mt-1">Ta jednostka wymaga liczby całkowitej.</small>')
                        .insertAfter(amountInput)
                        .fadeIn();
                } else {
                    amountInput.attr('step', '0.01');
                    amountInput.removeAttr('pattern');
                    amountInput.next('.form-text').remove();
                }
                
                // Pobierz aktualny przelicznik dla konkretnej ilości
                if (amount && amount > 0) {
                    $.ajax({
                        url: "{% url 'recipes:ajax_unit_info' %}",
                        data: { 
                            unit_id: unitId,
                            amount: amount
                        },
                        success: function(data) {
                            if (data.conversion) {
                                $('#unit-conversion').html(data.conversion);
                            }
                        }
                    });
                }
            }
        });

        // Aktualizacja przelicznika przy zmianie ilości
        $('#ingredient-amount').on('input', function() {
            const unitId = $('#ingredient-unit').val();
            const amount = $(this).val();
            
            if (unitId && amount && amount > 0) {
                $.ajax({
                    url: "{% url 'recipes:ajax_unit_info' %}",
                    data: { 
                        unit_id: unitId,
                        amount: amount
                    },
                    success: function(data) {
                        if (data.conversion) {
                            $('#unit-conversion').html(data.conversion);
                        }
                    }
                });
            }
        });

        // Własny edytor tekstu
        function initEditor(editorId, textareaId) {
            const editor = document.getElementById(editorId);
            const textarea = document.getElementById(textareaId);
            
            if (!editor || !textarea) return;
            
            const toolbar = editor.previousElementSibling;

            // Załaduj istniejącą treść
            editor.innerHTML = textarea.value;

            // Obsługa przycisków paska narzędzi
            toolbar.querySelectorAll('button').forEach(button => {
                button.addEventListener('click', function() {
                    const command = this.dataset.command;
                    document.execCommand(command, false, null);
                    editor.focus();
                });
            });

            // Synchronizuj zawartość z ukrytym textarea
            editor.addEventListener('input', function() {
                textarea.value = this.innerHTML;
            });

            // Zaznacz aktywne przyciski
            editor.addEventListener('keyup', function() {
                toolbar.querySelectorAll('button').forEach(button => {
                    const command = button.dataset.command;
                    button.classList.toggle('active', document.queryCommandState(command));
                });
            });

            editor.addEventListener('mouseup', function() {
                toolbar.querySelectorAll('button').forEach(button => {
                    const command = button.dataset.command;
                    button.classList.toggle('active', document.queryCommandState(command));
                });
            });
        }

        // Inicjalizacja edytorów
        var descriptionSelector = '{{ form.description.id_for_label }}';
        var instructionsSelector = '{{ form.instructions.id_for_label }}';
        
        if (descriptionSelector && descriptionSelector !== '') {
            initEditor('description-editor', descriptionSelector);
            $('#' + descriptionSelector).hide();
        }
        
        if (instructionsSelector && instructionsSelector !== '') {
            initEditor('instructions-editor', instructionsSelector);
            $('#' + instructionsSelector).hide();
        }

        // Ładowanie składników i jednostek przy starcie
        loadIngredients();
        loadUnits();
        
        // Licznik formularzy
        var formIndex = parseInt('{{ ingredient_formset.total_form_count }}');
        var maxForms = parseInt($("#id_ingredients-MAX_NUM_FORMS").val() || "100");
        
        // Inicjalizacja - wyświetl komunikat, gdy nie ma jeszcze składników
        if ($("#ingredients-list tr").length === 0) {
            $("#ingredients-list").append(
                '<tr class="no-ingredients"><td colspan="3" class="text-center">Brak składników. Dodanie składników jest opcjonalne, ale zalecane dla kompletnego przepisu.</td></tr>'
            );
        }

        // Funkcja ładująca składniki przez AJAX
        function loadIngredients() {
            $.ajax({
                url: "{% url 'recipes:ajax_ingredient_search' %}",
                type: "GET",
                success: function(data) {
                    let select = $("#ingredient-select");
                    select.empty().append('<option value="">-- Wybierz składnik --</option>');
                    
                    if (data.results && Array.isArray(data.results)) {
                        $.each(data.results, function(i, item) {
                            select.append(new Option(item.text, item.id));
                        });
                    }
                }
            });
        }
        
        // Funkcja ładująca jednostki miary przez AJAX
        function loadUnits() {
            $.ajax({
                url: "{% url 'recipes:ajax_load_units' %}",
                type: "GET",
                success: function(data) {
                    let select = $("#ingredient-unit");
                    select.empty().append('<option value="">-- Wybierz jednostkę --</option>');
                    
                    if (data.units && Array.isArray(data.units)) {
                        $.each(data.units, function(i, item) {
                            select.append(new Option(item.name, item.id));
                        });
                    }
                }
            });
        }

        // Obsługa dodawania składnika do przepisu z modalu
        $("#add-ingredient-to-recipe").on("click", function() {
            const ingredientId = $("#ingredient-select").val();
            const ingredientName = $("#ingredient-select option:selected").text();
            const amount = $("#ingredient-amount").val();
            const unitId = $("#ingredient-unit").val();
            const unitName = $("#ingredient-unit option:selected").text();
            const unitSymbol = $("#ingredient-unit option:selected").data('symbol') || '';
            
            // Walidacja
            if (!ingredientId || !amount || !unitId) {
                alert("Wszystkie pola są wymagane!");
                return;
            }
            
            if (formIndex >= maxForms) {
                alert("Osiągnięto maksymalną liczbę składników!");
                return;
            }
            
            // Usuń komunikat o braku składników, jeśli istnieje
            $("#ingredients-list tr.no-ingredients").remove();
            
            // Dodanie do tabeli
            const newRow = $('<tr data-form-index="' + formIndex + '">' +
                '<td>' + ingredientName + '</td>' +
                '<td>' + amount + ' ' + unitSymbol + ' (' + unitName + ')</td>' +
                '<td><button type="button" class="btn btn-sm btn-danger remove-ingredient" data-form-index="' + formIndex + '"><i class="bi bi-trash"></i> Usuń</button></td>' +
                '</tr>');
            
            $("#ingredients-list").append(newRow);
            
            // Dodanie do formset - dodajemy nowy składnik, a nie zastępujemy cały formset
            let formHtml = '<div class="ingredient-form-row" data-form-index="' + formIndex + '">' +
                '<input type="hidden" name="ingredients-' + formIndex + '-id" id="id_ingredients-' + formIndex + '-id">' +
                '<input type="hidden" name="ingredients-' + formIndex + '-recipe" id="id_ingredients-' + formIndex + '-recipe" value="' + (recipeId || '') + '">' +
                '<input type="hidden" name="ingredients-' + formIndex + '-ingredient" id="id_ingredients-' + formIndex + '-ingredient" value="' + ingredientId + '">' +
                '<input type="hidden" name="ingredients-' + formIndex + '-amount" id="id_ingredients-' + formIndex + '-amount" value="' + amount + '">' +
                '<input type="hidden" name="ingredients-' + formIndex + '-unit" id="id_ingredients-' + formIndex + '-unit" value="' + unitId + '">' +
                '</div>';
                
            $("#ingredient-formset").append(formHtml);
            
            // Zwiększamy licznik formularzy i aktualizujemy management form
            formIndex++;
            $("#id_ingredients-TOTAL_FORMS").val(formIndex);
            console.log("Zaktualizowano TOTAL_FORMS na: " + formIndex);
            
            // Pokaż tabelę składników
            $('#ingredients-table').removeClass('d-none');
            
            // Czyszczenie formularza
            $("#ingredient-select").val("").trigger("change");
            $("#ingredient-amount").val("");
            $("#ingredient-unit").val("").trigger("change");
            
            $("#ingredientModal").modal("hide");
        });
        
        // Obsługa usuwania składnika
        $(document).on("click", ".remove-ingredient", function() {
            var formIndex = $(this).data('form-index');
            
            // Oznacz składnik jako usunięty w formularzu
            if ($(`#id_ingredients-${formIndex}-DELETE`).length > 0) {
                $(`#id_ingredients-${formIndex}-DELETE`).prop('checked', true);
            } else {
                // Jeśli nie ma pola DELETE, to po prostu usuń ukryty formularz
                $(`#ingredient-formset .ingredient-form-row[data-form-index="${formIndex}"]`).remove();
            }
            
            // Usuń wiersz z tabeli
            $(this).closest('tr').remove();
            
            // Jeśli nie ma więcej składników, ukryj tabelę
            if ($('#ingredients-list tr').length === 0) {
                $('#ingredients-table').addClass('d-none');
                $("#ingredients-list").append(
                    '<tr class="no-ingredients"><td colspan="3" class="text-center">Brak składników. Dodanie składników jest opcjonalne, ale zalecane dla kompletnego przepisu.</td></tr>'
                );
            }
        });

        // Inicjalizacja istniejących składników podczas edycji przepisu
        function initExistingIngredients() {
            if (existingIngredients && existingIngredients.length > 0) {
                // Usuń wiadomość o braku składników
                $("#ingredients-list tr.no-ingredients").remove();
                
                // Dodaj każdy składnik do tabeli i ukrytych pól
                existingIngredients.forEach(function(ingredient) {
                    // Dodaj do tabeli
                    var newRow = $('<tr data-form-index="' + ingredient.formIndex + '">' +
                        '<td>' + ingredient.ingredientName + '</td>' +
                        '<td>' + ingredient.amount + ' ' + ingredient.unitSymbol + ' (' + ingredient.unitName + ')</td>' +
                        '<td><button type="button" class="btn btn-sm btn-danger remove-ingredient" data-form-index="' + ingredient.formIndex + '"><i class="bi bi-trash"></i> Usuń</button></td>' +
                        '</tr>');
                    
                    $("#ingredients-list").append(newRow);
                    
                    // Dodaj ukryte pola formularza
                    var formHtml = '<div class="ingredient-form-row" data-form-index="' + ingredient.formIndex + '">' +
                        '<input type="hidden" name="ingredients-' + ingredient.formIndex + '-id" id="id_ingredients-' + ingredient.formIndex + '-id" value="' + ingredient.id + '">' +
                        '<input type="hidden" name="ingredients-' + ingredient.formIndex + '-recipe" id="id_ingredients-' + ingredient.formIndex + '-recipe" value="' + recipeId + '">' +
                        '<input type="hidden" name="ingredients-' + ingredient.formIndex + '-ingredient" id="id_ingredients-' + ingredient.formIndex + '-ingredient" value="' + ingredient.ingredientId + '">' +
                        '<input type="hidden" name="ingredients-' + ingredient.formIndex + '-amount" id="id_ingredients-' + ingredient.formIndex + '-amount" value="' + ingredient.amount + '">' +
                        '<input type="hidden" name="ingredients-' + ingredient.formIndex + '-unit" id="id_ingredients-' + ingredient.formIndex + '-unit" value="' + ingredient.unitId + '">' +
                        '</div>';
                    
                    $("#ingredient-formset").append(formHtml);
                });
                
                // Aktualizuj licznik formularzy
                var totalForms = existingIngredients.length;
                $("#id_ingredients-TOTAL_FORMS").val(totalForms);
                formIndex = totalForms;
                
                // Pokaż tabelę
                $('#ingredients-table').removeClass('d-none');
            }
        }

        // Wywołaj inicjalizację po załadowaniu strony
        initExistingIngredients();

        // Obsługa formularza przy wysyłaniu
        $("#recipe-form").on("submit", function(e) {
            // Upewnij się, że pola edytora są zsynchronizowane z ukrytymi polami textarea
            var descriptionEditor = document.getElementById('description-editor');
            var instructionsEditor = document.getElementById('instructions-editor');
            
            if (descriptionEditor && descriptionSelector && descriptionSelector !== '') {
                document.getElementById(descriptionSelector).value = descriptionEditor.innerHTML;
            }
            
            if (instructionsEditor && instructionsSelector && instructionsSelector !== '') {
                document.getElementById(instructionsSelector).value = instructionsEditor.innerHTML;
            }
            
            return true;
        });
    });
</script>
{% endblock %} 